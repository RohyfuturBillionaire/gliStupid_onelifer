# # from deepface import DeepFace

# # result = DeepFace.analyze(img_path="photo.jpg", actions=["age", "gender", "emotion", "race"])
# # print(result)
# import ssl
# import urllib3

# # D√©sactive la v√©rification SSL (dangereux pour la s√©curit√©, √† utiliser juste pour tests locaux)
# ssl._create_default_https_context = ssl._create_unverified_context
# urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# from deepface import DeepFace

# result = DeepFace.analyze(img_path="photo1.jpeg", actions=["age", "gender", "emotion", "race"])
# # result = DeepFace.analyze(img_path="photo.jpg", actions=["emotion"])
# print(result)
# import ssl
# import urllib3
# from deepface import DeepFace
# from logiqueCaca import envie_de_caca

# # S√©curit√© d√©sactiv√©e temporairement
# ssl._create_default_https_context = ssl._create_unverified_context
# urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# # Analyse avec DeepFace
# result = DeepFace.analyze(img_path="photo.jpg", actions=["emotion"])
# dominant_emotion = result[0]["dominant_emotion"]

# # D√©cision "humoristique"
# if envie_de_caca(dominant_emotion):
#     print(f"Dominant emotion: {dominant_emotion}  Envie de faire caca")
# else:
#     print(f"Dominant emotion: {dominant_emotion}  Pas envie de faire caca")

# # result = DeepFace.analyze(img_path="photo.jpg", actions=["age", "gender", "emotion", "race"])
# # envie, score = envie_de_caca(result)

# # print(f"Envie de faire caca ? {'Oui' if envie else 'Non'}, score: {score}")

import ssl
import urllib3
from deepface import DeepFace

# D√©sactive la v√©rification SSL (√† √©viter en prod)
ssl._create_default_https_context = ssl._create_unverified_context
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

def traduire_emotion(emotion_en):
    traductions = {
        'angry': 'col√®re',
        'disgust': 'd√©go√ªt',
        'fear': 'peur',
        'happy': 'joie',
        'sad': 'tristesse',
        'surprise': 'surprise',
        'neutral': 'neutre'
    }
    return traductions.get(emotion_en.lower(), emotion_en)


def generer_commentaire(face_data):
    age = face_data['age']
    genre = face_data['dominant_gender']
    emotion = face_data['dominant_emotion']
    origine = face_data['dominant_race']

    # R√©flexions positives sur les origines (sans les nommer explicitement)
    compliments_origine = {
        'asian': "Il y a souvent une forme de sagesse tranquille et de pers√©v√©rance chez ceux qui viennent d‚Äôun h√©ritage culturel aussi ancien.",
        'indian': "Certaines personnes issues de ce type d‚Äôh√©ritage combinent naturellement profondeur spirituelle, intelligence et ambition.",
        'black': "Il y a une force cr√©ative et une r√©silience marquante chez ceux dont les racines sont aussi riches culturellement.",
        'white': "Ceux qui viennent de ce genre de parcours ont souvent une grande capacit√© d‚Äôadaptation et un esprit ind√©pendant.",
        'middle eastern': "On retrouve souvent une fiert√© profonde et un lien fort √† la famille dans les cultures de ce type.",
        'latino hispanic': "Beaucoup de personnes ayant un tel fond culturel rayonnent de chaleur, d‚Äô√©nergie et de joie de vivre contagieuse."
    }

    # Conseils selon l‚Äô√©motion dominante
    conseils_emotion = {
        'angry': "La col√®re peut arriver, c‚Äôest humain ‚Äî le tout, c‚Äôest de la canaliser intelligemment.",
        'disgust': "Si quelque chose te d√©go√ªte en ce moment, c‚Äôest peut-√™tre un signal qu‚Äôil faut changer ton environnement.",
        'fear': "La peur est souvent un indicateur de croissance ‚Äî elle montre que tu sors de ta zone de confort.",
        'happy': "Tu rayonnes de bonheur ‚Äî continue √† transmettre cette lumi√®re autour de toi.",
        'sad': "La tristesse ne veut pas dire faiblesse. Autorise-toi √† la ressentir, mais n‚Äôoublie pas que tu peux te relever.",
        'surprise': "La surprise est un moteur de d√©couverte. Accueille-la avec curiosit√©.",
        'neutral': "Rester calme et pos√©, c‚Äôest une force. Mais pense aussi √† te reconnecter √† ce que tu ressens vraiment."
    }
    gr=""
    # Conseils li√©s √† l‚Äô√¢ge
    if age < 18:
        conseil_age = "Tu es encore en train de te construire ‚Äî prends le temps de d√©couvrir ce qui te fait vibrer."
        clause_rizz = ""
    else:
        conseil_age = f"√Ä {age} ans, tu es √† un moment fort de ta vie ‚Äî c‚Äôest le moment de b√¢tir, d‚Äôoser et de te r√©aliser."
        clause_rizz = "Et au passage‚Ä¶ maintenant que tu es majeur¬∑e : on ne drague plus les mineurs. Faut rester dans ta tranche d‚Äô√¢ge üòå."
    if genre=="man": 
            gr='homme'
    else:
           gr='femme'
    # Construction du message
    commentaire = (
       
        f"Tu as l‚Äôair d‚Äôun¬∑e {gr} de {age} ans avec une vraie pr√©sence. "
        f"{compliments_origine.get(origine, '')}\n\n"
        f"En ce moment, tu sembles ressentir de la {traduire_emotion(emotion)} ‚Äî et c‚Äôest totalement l√©gitime. "
        f"{conseils_emotion.get(emotion, '')}\n\n"
        f"{conseil_age}\n\n"
        f"{clause_rizz}"
    )

    return commentaire


def analyze_face(image_path):
    try:
        result = DeepFace.analyze(img_path=image_path, actions=["age", "gender", "emotion", "race"])
        return generer_commentaire(result[0])
    except Exception as e:
        return {"error": str(e)}
    
if __name__=="__main__":
    res=analyze_face("outfitTest.jpeg")
    print(res)

# print(analyze_face("photo.jpg"))
